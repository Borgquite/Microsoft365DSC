[ClassVersion("1.0.0.0")]
class MSFT_AADMultiTenantOrganizationIdentitySyncPolicyTemplateUserSyncInbound
{
    [Write, Description("Defines whether user objects should be synchronized from the partner tenant. false causes any current user synchronization from the source tenant to the target tenant to stop. This property has no impact on existing users who have already been synchronized.")] Boolean isSyncAllowed;
};

[ClassVersion("1.0.0.0"), FriendlyName("AADMultiTenantOrganizationIdentitySyncPolicyTemplate")]
class MSFT_AADMultiTenantOrganizationIdentitySyncPolicyTemplate : OMI_BaseResource
{
    [Key, Description("Only valid value is 'Yes'."), ValueMap{"Yes"}, Values{"Yes"}] String IsSingleInstance;
    [Write, Description("Specifies whether the template will be applied to user synchronization settings of certain tenants. The possible values are: none, newPartners, existingPartners, unknownFutureValue. You can also specify multiple values like newPartners,existingPartners (default). none indicates the template is not applied to any new or existing partner tenants. newPartners indicates the template is applied to new partner tenants. existingPartners indicates the template is applied to existing partner tenants, those who already had partner-specific user synchronization settings in place.")] String TemplateApplicationLevel;
    [Write, Description("Determines whether users can be synchronized from the partner tenant. false causes any current user synchronization from the source tenant to the target tenant to stop. This property has no impact on existing users who have already been synchronized."), EmbeddedInstance("MSFT_AADMultiTenantOrganizationIdentitySyncPolicyTemplateUserSyncInbound")] String UserSyncInbound;

    [Write, Description("Present ensures the instance exists, absent ensures it is removed."), ValueMap{"Absent","Present"}, Values{"Absent","Present"}] string Ensure;
    [Write, Description("Credentials of the workload's Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
    [Write, Description("Access token used for authentication.")] String AccessTokens[];
};
